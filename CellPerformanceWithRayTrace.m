
% Copyright 2022-2023 The MathWorks, Inc.

rng("default") % Reset the random number generator
numFrameSimulation = 10; % Simulation time in terms of number of 10 ms frames
networkSimulator = wirelessNetworkSimulator.init; % Create a wireless network simulator

% Launch site viewer with buildings
if exist('viewer','var') && isvalid(viewer) % viewer handle exists and viewer window is open
    viewer.clearMap();
else
    viewer = siteviewer(Basemap="openstreetmap",Buildings="hongkong.osm");    
end

transmitterFrequency = 2.646e9;
% Create a radio frequency transmitter site and a radio frequency receiver
% site for gNB. Specify the name, carrier frequency, antenna height,
% latitude, and longitude parameters
gNBGeographicalPosition = [22.287495, 114.140706]; % Specify the gNB position in geographical coordinates (latitude, longitude)
gNBTxSite = txsite(Name="gNB",TransmitterFrequency=transmitterFrequency, ...
    AntennaHeight=4,Latitude=gNBGeographicalPosition(1), ...
    Longitude=gNBGeographicalPosition(2));
gNBRxSite = rxsite(Name="gNB",AntennaHeight=4, ...
    Latitude=gNBGeographicalPosition(1),Longitude=gNBGeographicalPosition(2));
% Set the gNB position in Cartesian coordinates. The (x, y) coordinates of
% gNB is assumed to be at (0, 0).
gNBPosition = [0 0 elevation(gNBTxSite)];
% Create a gNB. Specify the position, channel bandwidth, receive gain,
% number of transmit antennas, number of receive antennas, and carrier
% frequency of the node
gNB = nrGNB(Position=gNBPosition,ChannelBandwidth=10e6,ReceiveGain=12, ...
    NumTransmitAntennas=16,NumReceiveAntennas=8, ...
    CarrierFrequency=gNBTxSite.TransmitterFrequency);
% Set the scheduler parameters Scheduler and ResourceAllocationType by
% using the configureScheduler function.
configureScheduler(gNB,Scheduler="ProportionalFair", ResourceAllocationType=0);

% Set the UE position by specifying the distance and angle information with
% respect to the gNB position
angles = [90; 65; 180; 195];
distances = [20 20 20 20];
ueLat = zeros(numel(angles), 1);
ueLon = zeros(numel(angles), 1);
uePositions = zeros(numel(angles), 3);
for idx = 1:numel(angles)
    angle = angles(idx);
    distance = distances(idx);
    % Calculate the latitude and longitude for the UE positions
    [ueLat(idx), ueLon(idx)] = location(gNBTxSite,distance,angle);
    % Calculate the Cartesian coordinates for the UE positions
    uePositions(idx,1:2) = distance*[cosd(angle) sind(angle)];
end
% Create an array of receiver sites and an array of transmitter sites for
% UEs
ueRxSites = rxsite(Name="UE",Latitude=ueLat,Longitude=ueLon,AntennaHeight=1);
ueTxSites = txsite(Name="UE",Latitude=ueLat,Longitude=ueLon(idx), ...
    AntennaHeight=1,TransmitterFrequency=transmitterFrequency);
% Update the height for UEs
uePositions(:, 3) = elevation(ueRxSites);
% Create 4 UEs. Specify the name, position, number of transmit antennas,
% number of receive antennas, and receive gain of each UE
UEs = nrUE(Position=uePositions,NumTransmitAntennas=4,NumReceiveAntennas=4);

% Connect the UEs to gNB
connectUE(gNB,UEs,RLCBearerConfig=nrRLCBearerConfig(BucketSizeDuration=10))

% Set the periodic DL and UL application traffic pattern for UEs
appDataRate = [40e3; 30e3; 20e3; 20e3]; % Application data rate in kilo bits per second (kbps)
for ueIdx = 1:length(UEs)
    % Install DL application traffic on gNB for the UE
    dlApp = networkTrafficOnOff(GeneratePacket=true, ...
        OnTime=numFrameSimulation*10e-3,OffTime=0, ...
        DataRate=appDataRate(ueIdx));
    addTrafficSource(gNB,dlApp,DestinationNode=UEs(ueIdx))

    % Install UL application traffic on UE for the gNB
    ulApp = networkTrafficOnOff(GeneratePacket=true, ...
        OnTime=numFrameSimulation*10e-3,OffTime=0, ...
        DataRate=appDataRate(ueIdx));
    addTrafficSource(UEs(ueIdx),ulApp)
end

% Add gNB and UEs to the network simulator
addNodes(networkSimulator,gNB)
addNodes(networkSimulator,UEs)

% Visualize the location of the base station and the UE
show(gNBTxSite)
show(ueRxSites)

% Perform ray tracing analysis using the image method
reflectionsOrder = 2; % Number of reflections for ray tracing analysis (0 for line of sight(LOS))
pm = propagationModel("raytracing",Method='image', ...
    MaxNumReflections=reflectionsOrder);
% Generate downlink ray traces
raysDL = raytrace(gNBTxSite,ueRxSites,pm,Type="pathloss");
% Generate uplink ray traces
raysUL = raytrace(ueTxSites,gNBRxSite,pm,Type="pathloss");

% Create a N-by-N array of link-level channels where N is the number of
% nodes in the cell. An element at index (i,j) contains the channel
% instance from node i to node j. If element at index (i,j) is empty, it
% indicates that there is no channel from node i to node j. Here i and j
% are the node IDs
channelConfig = struct("DelayProfile","Custom");
% Create and configure CDL channels with the information generated by the
% ray tracing analysis
channels = createCDLChannels(raysUL,raysDL,channelConfig,gNB,UEs);

% Create a custom channel model using channels and install the custom
% channel on the simulator. Network simulator applies the channel for a
% packet in transit before passing it to the receiver
customChannelModel = hNRCustomChannelModel(channels);
addChannelModel(networkSimulator,@customChannelModel.applyChannelModel)

% Set the enableTraces to true to log the traces. If the enableTraces is
% set to false, then traces are not logged in the simulation. To speed up
% the simulation, set the enableTraces to false
enableTraces = true;
% The cqiVisualization and rbVisualization parameters control the display
% of the CQI visualization and the RB assignment visualization
% respectively. By default, these plots are enabled. You can disable them
% by setting the respective flags to false
cqiVisualization = true;
rbVisualization = true;

% Set up scheduling logger and phy logger
if enableTraces
    % Create an object for scheduler traces logging
    simSchedulingLogger = helperNRSchedulingLogger(numFrameSimulation,gNB,UEs);
    % Create an object for PHY traces logging
    simPhyLogger = helperNRPhyLogger(numFrameSimulation,gNB,UEs);
    % Create an object for CQI and RB grid visualization
    gridVisualizer = helperNRGridVisualizer(numFrameSimulation,gNB,UEs,CQIGridVisualization=cqiVisualization, ...
        ResourceGridVisualization=rbVisualization,SchedulingLogger=simSchedulingLogger);
end

% The example updates the metrics plots periodically. Set the number of
% updates during the simulation.
numMetricsSteps = 20;
% Set up metric visualizer
metricsVisualizer = helperNRMetricsVisualizer(gNB,UEs,NumMetricsSteps=numMetricsSteps,...
    PlotSchedulerMetrics=true,PlotPhyMetrics=true);

% Write the logs to MAT-file. You can use these logs for post-simulation
% analysis.
simulationLogFile = "simulationLogs"; % For logging the simulation traces

% Calculate the simulation duration (in seconds)
simulationTime = numFrameSimulation * 1e-2;
% Run the simulation
run(networkSimulator,simulationTime)

% At the end of the simulation, the achieved value for system performance
% indicators is compared to their theoretical peak values (considering zero
% overheads). Performance indicators displayed are achieved data rate (UL
% and DL), achieved spectral efficiency (UL and DL), and block error rate
% (BLER) observed for UEs (UL and DL). The peak values are calculated as
% per 3GPP TR 37.910
displayPerformanceIndicators(metricsVisualizer)

% Save the simulation logs in a MAT file
if enableTraces
    simulationLogs = cell(1,1);
    if gNB.DuplexMode == "FDD"
        logInfo = struct("DLTimeStepLogs",[],"ULTimeStepLogs",[], ...
            "SchedulingAssignmentLogs",[],"PhyReceptionLogs",[]);
        [logInfo.DLTimeStepLogs,logInfo.ULTimeStepLogs] = ...
            getSchedulingLogs(simSchedulingLogger);
    else % TDD
        logInfo = struct("TimeStepLogs",[],"SchedulingAssignmentLogs", ...
            [],"PhyReceptionLogs",[]);
        logInfo.TimeStepLogs = getSchedulingLogs(simSchedulingLogger);
    end
    % Get the scheduling assignments log
    logInfo.SchedulingAssignmentLogs = getGrantLogs(simSchedulingLogger);
    % Get the Phy reception logs
    logInfo.PhyReceptionLogs = getReceptionLogs(simPhyLogger);
    % Save simulation logs in a MAT-file
    simulationLogs{1} = logInfo;
    save(simulationLogFile,"simulationLogs")
end

function channels = createCDLChannels(raysULList,raysDLList,channelConfig,gNB,UEs)
%createCDLChannels Create channels between gNB and UEs in a cell
%   CHANNELS = createCDLChannels(CHANNELCONFIG,GNB,UES) creates channels
%   between GNB and UES in a cell.
%
%   CHANNELS is a N-by-N array where N is the number of nodes in the cell.
%
%   RAYSULList is a comms.Ray object containing the uplink ray trace
%   information between the UEs and gNB.
%
%   RAYSDLList is a comms.Ray object containing the downlink ray trace
%   information between the gNB and UEs.
%
%   CHANNLECONFIG is a struct with these fields - DelayProfile and
%   DelaySpread.
%
%   GNB is an nrGNB object.
%
%   UES is an array of nrUE objects.

numUEs = length(UEs);
numNodes = length(gNB) + numUEs;
% Create channel matrix to hold the channel objects
channels = cell(numNodes,numNodes);

% Get the sample rate of waveform
waveformInfo = nrOFDMInfo(gNB.NumResourceBlocks,gNB.SubcarrierSpacing/1e3);
sampleRate = waveformInfo.SampleRate;

for ueIdx = 1:numUEs
    raysUL = raysULList{ueIdx};
    % Time of arrival of each ray, normalized to 0 sec
    pathToAs = [raysUL.PropagationDelay] - min([raysUL.PropagationDelay]);
    pathGains = -[raysUL.PathLoss]; % Path gains of each ray
    pathAoDs = [raysUL.AngleOfDeparture];  % AoD of each ray
    pathAoAs = [raysUL.AngleOfArrival]; % AoA of each ray
    isLOS = any([raysUL.LineOfSight]);
    % Configure the uplink channel model between gNB and UE
    channel = nrCDLChannel;
    channel.DelayProfile = channelConfig.DelayProfile;
    channel.PathDelays = pathToAs;
    channel.AveragePathGains = pathGains;
    channel.AnglesAoD = pathAoDs(1,:); % Azimuth
    channel.AnglesZoD = 90 - pathAoDs(2,:); % Channel uses zenith angle, and rays use elevation
    channel.AnglesAoA = pathAoAs(1,:); % azimuth
    channel.AnglesZoA = 90 - pathAoAs(2,:); % Channel uses zenith angle, and rays use elevation
    channel.HasLOSCluster = isLOS;
    channel.NormalizeChannelOutputs = false; % Do not normalize by the number of receive antennas, this would change the receive power
    channel.CarrierFrequency = gNB.CarrierFrequency;
    channel.ChannelFiltering = false;
    channel = hArrayGeometry(channel,UEs(ueIdx).NumTransmitAntennas, ...
        gNB.NumReceiveAntennas,"uplink");
    channel.SampleRate = sampleRate;
    channel.TransmitAntennaArray.Element = 'isotropic';
    channels{UEs(ueIdx).ID, gNB.ID} = channel;

    raysDL = raysDLList{ueIdx};
    % Time of arrival of each ray, normalized to 0 sec
    pathToAs = [raysDL.PropagationDelay] - min([raysDL.PropagationDelay]);
    pathGains = -[raysDL.PathLoss]; % Path gains of each ray
    pathAoDs = [raysDL.AngleOfDeparture];  % AoD of each ray
    pathAoAs = [raysDL.AngleOfArrival]; % AoA of each ray
    isLOS = any([raysDL.LineOfSight]);
    % Configure the downlink channel model between gNB and UE
    channel = nrCDLChannel;
    channel.DelayProfile = channelConfig.DelayProfile;
    channel.PathDelays = pathToAs;
    channel.AveragePathGains = pathGains;
    channel.AnglesAoD = pathAoDs(1,:); % Azimuth
    channel.AnglesZoD = 90 - pathAoDs(2,:); % Channel uses zenith angle, and rays use elevation
    channel.AnglesAoA = pathAoAs(1,:); % azimuth
    channel.AnglesZoA = 90 - pathAoAs(2,:); % Channel uses zenith angle, and rays use elevation
    channel.HasLOSCluster = isLOS;
    channel.NormalizeChannelOutputs = false; % Do not normalize by the number of receive antennas, this would change the receive power
    channel.CarrierFrequency = gNB.CarrierFrequency;
    channel = hArrayGeometry(channel,gNB.NumTransmitAntennas, ...
        UEs(ueIdx).NumReceiveAntennas,"downlink");
    channel.SampleRate = sampleRate;
    channel.TransmitAntennaArray.Element = 'isotropic';
    channel.ChannelFiltering = false;
    channels{gNB.ID,UEs(ueIdx).ID} = channel;
end
end